/* #Skeleton Grid
================================================== */

@column: 40px;
@columns: 16;
@gutter: 20px;

@width: (@column + @gutter) * @columns;




    .container                                  { position: relative; width: @width; margin: 0 auto; padding: 0; }
    .column, .columns                           { 
                                                    float: left; 
                                                    display: inline; 
                                                    margin-left: (@gutter / 2); 
                                                    margin-right: (@gutter / 2);
                                                    margin-bottom: @gutter; 
                                                }
    .row                                        { margin-bottom: 0px; }

    /* Nested Column Classes */
    .column.alpha, .columns.alpha               { margin-left: 0; }
    .column.omega, .columns.omega               { margin-right: 0; }

    /* Base Grid */
    .container .one.column                      { width: ( (1  * (@width / @columns)) - @gutter);  }
    .container .two.columns                     { width: ( (2  * (@width / @columns)) - @gutter);  }
    .container .three.columns                   { width: ( (3  * (@width / @columns)) - @gutter);  }
    .container .four.columns                    { width: ( (4  * (@width / @columns)) - @gutter);  }
    .container .five.columns                    { width: ( (5  * (@width / @columns)) - @gutter);  }
    .container .six.columns                     { width: ( (6  * (@width / @columns)) - @gutter);  }
    .container .seven.columns                   { width: ( (7  * (@width / @columns)) - @gutter);  }
    .container .eight.columns                   { width: ( (8  * (@width / @columns)) - @gutter);  }
    .container .nine.columns                    { width: ( (9  * (@width / @columns)) - @gutter);  }
    .container .ten.columns                     { width: ( (10 * (@width / @columns)) - @gutter);  }
    .container .eleven.columns                  { width: ( (11 * (@width / @columns)) - @gutter);  }
    .container .twelve.columns                  { width: ( (12 * (@width / @columns)) - @gutter);  }
    .container .thirteen.columns                { width: ( (13 * (@width / @columns)) - @gutter);  }
    .container .fourteen.columns                { width: ( (14 * (@width / @columns)) - @gutter);  }
    .container .fifteen.columns                 { width: ( (15 * (@width / @columns)) - @gutter);  }
    .container .sixteen.columns                 { width: ( (16 * (@width / @columns)) - @gutter);  }

    .container .one-third.column                { width: ((@width / 3) - @gutter); }
    .container .two-thirds.column               { width: (((@width / 3) * 2) - @gutter); }

    /* Offsets */
    .container .offset-by-one                   { padding-left: (1  * (@width / @columns) );  }
    .container .offset-by-two                   { padding-left: (2  * (@width / @columns) );  }
    .container .offset-by-three                 { padding-left: (3  * (@width / @columns) );  }
    .container .offset-by-four                  { padding-left: (4  * (@width / @columns) );  }
    .container .offset-by-five                  { padding-left: (5  * (@width / @columns) );  }
    .container .offset-by-six                   { padding-left: (6  * (@width / @columns) );  }
    .container .offset-by-seven                 { padding-left: (7  * (@width / @columns) );  }
    .container .offset-by-eight                 { padding-left: (8  * (@width / @columns) );  }
    .container .offset-by-nine                  { padding-left: (9  * (@width / @columns) );  }
    .container .offset-by-ten                   { padding-left: (10 * (@width / @columns) );  }
    .container .offset-by-eleven                { padding-left: (11 * (@width / @columns) );  }
    .container .offset-by-twelve                { padding-left: (12 * (@width / @columns) );  }
    .container .offset-by-thirteen              { padding-left: (13 * (@width / @columns) );  }
    .container .offset-by-fourteen              { padding-left: (14 * (@width / @columns) );  }
    .container .offset-by-fifteen               { padding-left: (15 * (@width / @columns) );  }

    .container .offset-by-one-third             { padding-left: ((@width / 3) - @gutter); }
    .container .offset-by-two-thirds             { padding-left: (((@width / 3) * 2) - @gutter); }



/* #Tablet (Portrait)
================================================== */

    /* Note: Design for a width of 768px */

    @media only screen and (min-width: 768px) and (max-width: 959px) {
        
        @width: 768px;

        .container                                  { width: @width; }
        .container .column,
        .container .columns                         { margin-left: (@gutter / 2); margin-right: (@gutter / 2);  }
        .column.alpha, .columns.alpha               { margin-left: 0; margin-right: (@gutter / 2); }
        .column.omega, .columns.omega               { margin-right: 0; margin-left: (@gutter / 2); }

        .container .one.column                      { width: ( (1  * (@width / @columns)) - @gutter);  }
        .container .two.columns                     { width: ( (2  * (@width / @columns)) - @gutter);  }
        .container .three.columns                   { width: ( (3  * (@width / @columns)) - @gutter);  }
        .container .four.columns                    { width: ( (4  * (@width / @columns)) - @gutter);  }
        .container .five.columns                    { width: ( (5  * (@width / @columns)) - @gutter);  }
        .container .six.columns                     { width: ( (6  * (@width / @columns)) - @gutter);  }
        .container .seven.columns                   { width: ( (7  * (@width / @columns)) - @gutter);  }
        .container .eight.columns                   { width: ( (8  * (@width / @columns)) - @gutter);  }
        .container .nine.columns                    { width: ( (9  * (@width / @columns)) - @gutter);  }
        .container .ten.columns                     { width: ( (10 * (@width / @columns)) - @gutter);  }
        .container .eleven.columns                  { width: ( (11 * (@width / @columns)) - @gutter);  }
        .container .twelve.columns                  { width: ( (12 * (@width / @columns)) - @gutter);  }
        .container .thirteen.columns                { width: ( (13 * (@width / @columns)) - @gutter);  }
        .container .fourteen.columns                { width: ( (14 * (@width / @columns)) - @gutter);  }
        .container .fifteen.columns                 { width: ( (15 * (@width / @columns)) - @gutter);  }
        .container .sixteen.columns                 { width: ( (16 * (@width / @columns)) - @gutter);  }

        .container .one-third.column                { width: ((@width / 3) - @gutter); }
        .container .two-thirds.column               { width: (((@width / 3) * 2) - @gutter); }

        /* Offsets */
        .container .offset-by-one                   { padding-left: (1  * (@width / @columns) );  }
        .container .offset-by-two                   { padding-left: (2  * (@width / @columns) );  }
        .container .offset-by-three                 { padding-left: (3  * (@width / @columns) );  }
        .container .offset-by-four                  { padding-left: (4  * (@width / @columns) );  }
        .container .offset-by-five                  { padding-left: (5  * (@width / @columns) );  }
        .container .offset-by-six                   { padding-left: (6  * (@width / @columns) );  }
        .container .offset-by-seven                 { padding-left: (7  * (@width / @columns) );  }
        .container .offset-by-eight                 { padding-left: (8  * (@width / @columns) );  }
        .container .offset-by-nine                  { padding-left: (9  * (@width / @columns) );  }
        .container .offset-by-ten                   { padding-left: (10 * (@width / @columns) );  }
        .container .offset-by-eleven                { padding-left: (11 * (@width / @columns) );  }
        .container .offset-by-twelve                { padding-left: (12 * (@width / @columns) );  }
        .container .offset-by-thirteen              { padding-left: (13 * (@width / @columns) );  }
        .container .offset-by-fourteen              { padding-left: (14 * (@width / @columns) );  }
        .container .offset-by-fifteen               { padding-left: (15 * (@width / @columns) );  }

        .container .offset-by-one-third             { padding-left: ((@width / 3) - @gutter); }
        .container .offset-by-two-thirds             { padding-left: (((@width / 3) * 2) - @gutter); }
    }


/*  #Mobile (Portrait)
================================================== */

    /* Note: Design for a width of 320px */

    @media only screen and (max-width: 767px) {
        .container { width: 300px; }
        .columns, .column { margin: 0 0 @gutter 0; }

        .container .one.column,
        .container .two.columns,
        .container .three.columns,
        .container .four.columns,
        .container .five.columns,
        .container .six.columns,
        .container .seven.columns,
        .container .eight.columns,
        .container .nine.columns,
        .container .ten.columns,
        .container .eleven.columns,
        .container .twelve.columns,
        .container .thirteen.columns,
        .container .fourteen.columns,
        .container .fifteen.columns,
        .container .sixteen.columns,
        .container .one-third.column,
        .container .two-thirds.column  { width: 300px; }

        /* Offsets */
        .container .offset-by-one,
        .container .offset-by-two,
        .container .offset-by-three,
        .container .offset-by-four,
        .container .offset-by-five,
        .container .offset-by-six,
        .container .offset-by-seven,
        .container .offset-by-eight,
        .container .offset-by-nine,
        .container .offset-by-ten,
        .container .offset-by-eleven,
        .container .offset-by-twelve,
        .container .offset-by-thirteen,
        .container .offset-by-fourteen,
        .container .offset-by-fifteen { padding-left: 0; }

    }


/* #Mobile (Landscape)
================================================== */

    /* Note: Design for a width of 480px */

    @media only screen and (min-width: 480px) and (max-width: 767px) {
        .container { width: 420px; }
        .columns, .column { margin: 0 0 @gutter 0; }

        .container .one.column,
        .container .two.columns,
        .container .three.columns,
        .container .four.columns,
        .container .five.columns,
        .container .six.columns,
        .container .seven.columns,
        .container .eight.columns,
        .container .nine.columns,
        .container .ten.columns,
        .container .eleven.columns,
        .container .twelve.columns,
        .container .thirteen.columns,
        .container .fourteen.columns,
        .container .fifteen.columns,
        .container .sixteen.columns,
        .container .one-third.column,
        .container .two-thirds.column { width: 420px; }
    }


/* #Clearing
================================================== */

    /* Self Clearing Goodness */
    .container:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; }

    /* Use clearfix class on parent to clear nested columns,
    or wrap each row of columns in a <div class="row"> */
    .clearfix:before,
    .clearfix:after,
    .row:before,
    .row:after {
      content: '\0020';
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0; }
    .row:after,
    .clearfix:after {
      clear: both; }
    .row,
    .clearfix {
      zoom: 1; }

    /* You can also use a <br class="clear" /> to clear columns */
    .clear {
      clear: both;
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0;
    }

    /* -------------------------------------------------- 
    :: Mobile Visibility Affordances
---------------------------------------------------*/
    
    
    .show-on-phones { display: none !important; }   
    .show-on-tablets { display: none !important; }
    .show-on-desktops { display: block !important; }
    
    .hide-on-phones { display: block !important; }  
    .hide-on-tablets { display: block !important; }
    .hide-on-desktops { display: none !important; }
    
    
    @media only screen and (max-device-width: 800px), only screen and (device-width: 1024px) and (device-height: 600px), only screen and (width: 1280px) and (orientation: landscape), only screen and (device-width: 800px) {
        .hide-on-phones { display: block !important; }
        .hide-on-tablets { display: none !important; }
        .hide-on-desktops { display: block !important; }
        
        .show-on-phones { display: none !important; }
        .show-on-tablets { display: block !important; }
        .show-on-desktops { display: none !important; }
    }
    
        
    @media only screen and (max-width: 767px) {
        .hide-on-phones { display: none !important; }
        .hide-on-tablets { display: block !important; }
        .hide-on-desktops { display: block !important; }
        
        .show-on-phones { display: block !important; }
        .show-on-tablets { display: none !important; }
        .show-on-desktops { display: none !important; }
    }
    
    /* only screen and (device-width: 1280px), only screen and (max-device-width: 1280px),  /*
    /* Keeping this in as a reminder to address support for other tablet devices like the Xoom in the future */
    
    /* Specific overrides for elements that require something other than display: block */
    
    table.show-on-desktops { display: table !important; }
    table.hide-on-phones { display: table !important; } 
    table.hide-on-tablets { display: table !important; }
    
    @media only screen and (max-device-width: 800px), only screen and (device-width: 1024px) and (device-height: 600px), only screen and (width: 1280px) and (orientation: landscape), only screen and (device-width: 800px) {
        table.hide-on-phones { display: block !important; }
        table.hide-on-desktops { display: block !important; }
        table.show-on-tablets { display: block !important; }
    }
    
    @media only screen and (max-width: 767px) {
        table.hide-on-tablets { display: block !important; }
        table.hide-on-desktops { display: block !important; }
        table.show-on-phones { display: block !important; }
    }